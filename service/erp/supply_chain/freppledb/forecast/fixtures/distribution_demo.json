[
{"model":"forecast.measure", "fields": {"name": "forecastbaselinevalue", "label": "forecast baseline value", "type": "computed", "mode_future": "view", "mode_past": "view", "compute_expression": "if(cost == 0, forecastbaselinevalue, forecastbaseline * cost)", "update_expression": "if(cost != 0, forecastbaseline := newvalue /cost, forecastbaselinevalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "forecastconsumedvalue", "label": "forecast consumed value", "type": "computed", "mode_future": "view", "mode_past": "view", "compute_expression": "if(cost == 0, forecastconsumedvalue, forecastconsumed * cost)", "update_expression": "if(cost != 0, forecastconsumed := newvalue / cost, forecastconsumedvalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "forecastnetvalue", "label": "forecast net value", "type": "computed", "mode_future": "view", "mode_past": "view", "compute_expression": "if(cost == 0, forecastnetvalue, forecastnet * cost)", "update_expression": "if(cost != 0, forecastnet := newvalue /cost, forecastnetvalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "forecastoverridevalue", "label": "forecast override value", "type": "computed", "overrides": "forecastbaselinevalue", "mode_future": "edit", "mode_past": "view", "compute_expression": "if(cost == 0, forecastoverridevalue, if(forecastoverride == -1, -1, forecastoverride * cost))", "update_expression": "if(cost != 0, forecastoverride := if(newvalue == -1, -1, newvalue / cost), forecastoverridevalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "-1.0"}},
{"model":"forecast.measure", "fields": {"name": "forecastplannedvalue", "label": "planned forecast value", "type": "computed", "mode_future": "view", "mode_past": "hide", "compute_expression": "if(cost == 0, forecastplannedvalue, forecastplanned * cost)", "update_expression": "if(cost != 0, forecastplanned := newvalue /cost, forecastplannedvalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "forecasttotalvalue", "label": "forecast total value", "type": "computed", "mode_future": "view", "mode_past": "view", "compute_expression": "if(cost == 0, forecasttotalvalue, forecasttotal * cost)", "update_expression": "if(cost != 0, forecasttotal:= newvalue /cost, forecasttotalvalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "ordersadjustmentvalue", "label": "orders adjustment value", "type": "computed", "mode_future": "hide", "mode_past": "edit", "compute_expression": "if(cost == 0, ordersadjustmentvalue, ordersadjustment * cost)", "update_expression": "if(cost != 0, ordersadjustment := newvalue /cost, ordersadjustmentvalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "ordersopenvalue", "label": "orders open value", "type": "computed", "mode_future": "view", "mode_past": "view", "compute_expression": "if(cost == 0, ordersopenvalue, ordersopen * cost)", "update_expression": "if(cost != 0, ordersopen := newvalue /cost, ordersopenvalue := newvalue)", "initially_hidden": true, "formatter": "currency", "discrete": false, "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "ordersplannedvalue", "label": "planned orders value", "type": "computed", "mode_future": "view", "mode_past": "hide", "compute_expression": "if(cost == 0, ordersplannedvalue, ordersplanned * cost)", "update_expression": "if(cost != 0, ordersplanned := newvalue /cost, ordersplannedvalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "orderstotalvalue", "label": "orders total value", "type": "computed", "mode_future": "view", "mode_past": "view", "compute_expression": "if(cost == 0, orderstotalvalue, orderstotal * cost)", "update_expression": "if(cost != 0, orderstotal := newvalue /cost, orderstotalvalue := newvalue)", "initially_hidden": true, "formatter": "currency", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "forecasttotal", "label": "total forecast", "type": "computed", "mode_future": "view", "mode_past": "view", "description": "This row is what we'll plan supply for", "compute_expression": "if(forecastoverride == -1, forecastbaseline, forecastoverride)", "initially_hidden": false, "formatter": "number", "defaultvalue": "0"}},
{"model":"forecast.measure", "fields": {"name": "nodata", "label": "no data", "type": "local", "mode_future": "edit", "mode_past": "edit", "description": "Indicates gaps in the sales history", "initially_hidden": true, "formatter": "number", "defaultvalue": "0"}},
{"model":"forecast.forecast","fields": {"name":"All-surface tennis ball pack @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"All-surface tennis ball pack","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"All-surface tennis ball pack @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"All-surface tennis ball pack","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"All-surface tennis shoes @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"All-surface tennis shoes","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"All-surface tennis shoes @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"All-surface tennis shoes","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Clay tennis ball pack @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Clay tennis ball pack","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Clay tennis ball pack @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Clay tennis ball pack","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Clay tennis shoes @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Clay tennis shoes","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Clay tennis shoes @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Clay tennis shoes","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Hard tennis ball pack @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Hard tennis ball pack","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Hard tennis ball pack @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Hard tennis ball pack","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Novak racket @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Novak racket","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Novak racket @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Novak racket","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Socks @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Socks","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Socks @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Socks","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Tennis racket @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Tennis racket","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Tennis racket @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Tennis racket","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Tennis short @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Tennis short","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Tennis short @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Tennis short","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Tennis tee-shirt long sleeves @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Tennis tee-shirt long sleeves","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Tennis tee-shirt long sleeves @ Tennis shop Paris","method":"automatic","priority":10,"discrete":true,"customer_id":"Generic customer","item_id":"Tennis tee-shirt long sleeves","location_id":"Tennis shop Paris","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Umpire chair @ Tennis shop Brussels","method":"automatic","priority":10,"discrete":false,"customer_id":"Generic customer","item_id":"Umpire chair","location_id":"Tennis shop Brussels","planned":true}},
{"model":"forecast.forecast","fields": {"name":"Umpire chair @ Tennis shop Paris","method":"automatic","priority":10,"discrete":false,"customer_id":"Generic customer","item_id":"Umpire chair","location_id":"Tennis shop Paris","planned":true}},
{"pk": "forecast.Croston_initialAlfa", "model": "common.parameter", "fields": {"description": "Initial parameter for the Croston forecast method.", "value": "default"}},
{"pk": "forecast.Croston_maxAlfa", "model": "common.parameter", "fields": {"description": "Maximum parameter for the Croston forecast method.", "value": "default"}},
{"pk": "forecast.Croston_minAlfa", "model": "common.parameter", "fields": {"description": "Minimum parameter for the Croston forecast method.", "value": "default"}},
{"pk": "forecast.Croston_minIntermittence", "model": "common.parameter", "fields": {"description": "Minimum intermittence (defined as the percentage of zero demand buckets) before the Croston method is applied.", "value": "default"}},
{"pk": "forecast.DoubleExponential_dampenTrend", "model": "common.parameter", "fields": {"description": "Dampening factor applied to the trend in future periods.", "value": "default"}},
{"pk": "forecast.DoubleExponential_initialAlfa", "model": "common.parameter", "fields": {"description": "Initial smoothing constant.", "value": "default"}},
{"pk": "forecast.DoubleExponential_initialGamma", "model": "common.parameter", "fields": {"description": "Initial trend smoothing constant.", "value": "default"}},
{"pk": "forecast.DoubleExponential_maxAlfa", "model": "common.parameter", "fields": {"description": "Maximum smoothing constant.", "value": "default"}},
{"pk": "forecast.DoubleExponential_maxGamma", "model": "common.parameter", "fields": {"description": "Maximum trend smoothing constant.", "value": "default"}},
{"pk": "forecast.DoubleExponential_minAlfa", "model": "common.parameter", "fields": {"description": "Minimum smoothing constant.", "value": "default"}},
{"pk": "forecast.DoubleExponential_minGamma", "model": "common.parameter", "fields": {"description": "Minimum trend smoothing constant.", "value": "default"}},
{"pk": "forecast.DueWithinBucket", "model": "common.parameter", "fields": {"description": "Specifies whether forecasted demand is due at the 'start', 'middle' or 'end' of the bucket.", "value": "middle"}},
{"pk": "forecast.Horizon_future", "model": "common.parameter", "fields": {"description": "Specifies the number of days in the future we generate a forecast for.", "value": "365"}},
{"pk": "forecast.Horizon_history", "model": "common.parameter", "fields": {"description": "Specifies the number of days in the past we use to compute a statistical forecast.", "value": "10000"}},
{"pk": "forecast.Iterations", "model": "common.parameter", "fields": {"description": "Specifies the maximum number of iterations allowed for a forecast method to tune its parameters.", "value": "default"}},
{"pk": "forecast.MovingAverage_order", "model": "common.parameter", "fields": {"description": "This parameter controls the number of buckets to be averaged by the moving average forecast method.", "value": "default"}},
{"pk": "forecast.Net_CustomerThenItemHierarchy", "model": "common.parameter", "fields": {"description": "This flag allows us to control whether we first search the customer hierarchy and then the item hierarchy, or the other way around.", "value": "1"}},
{"pk": "forecast.Net_MatchUsingDeliveryOperation", "model": "common.parameter", "fields": {"description": "Specifies whether or not a demand and a forecast require to have the same delivery operation to be a match.", "value": "1"}},
{"pk": "forecast.Net_NetEarly", "model": "common.parameter", "fields": {"description": "Defines how much time (expressed in days) before the due date of an order we are allowed to search for a forecast bucket to net from.", "value": "0"}},
{"pk": "forecast.Net_NetLate", "model": "common.parameter", "fields": {"description": "Defines how much time (expressed in days) after the due date of an order we are allowed to search for a forecast bucket to net from.", "value": "0"}},
{"pk": "forecast.Net_PastDemand", "model": "common.parameter", "fields": {"description": "When this parameter is false (default) only sales orders in the current and future buckets net from forecast. When set to true also older demands are used for netting forecast.", "value": "false"}},
{"pk": "forecast.Net_IgnoreLocation", "model": "common.parameter", "fields": {"description": "When this parameter is true the forecasting netting doesn't need a match between location of the sales order and the forecast.", "value": "false"}},
{"pk": "forecast.populateForecastTable", "model": "common.parameter", "fields": {"description": "Populates automatically the forecast table based on the item/location combinations found in the demand table using parent customer when available. Default : true", "value": "true"}},
{"pk": "forecast.Seasonal_dampenTrend", "model": "common.parameter", "fields": {"description": "Dampening factor applied to the trend in future periods.", "value": "default"}},
{"pk": "forecast.Seasonal_initialAlfa", "model": "common.parameter", "fields": {"description": "Initial value for the constant parameter", "value": "default"}},
{"pk": "forecast.Seasonal_initialBeta", "model": "common.parameter", "fields": {"description": "Initial value for the trend parameter", "value": "default"}},
{"pk": "forecast.Seasonal_maxAlfa", "model": "common.parameter", "fields": {"description": "Maximum value for the constant parameter", "value": "default"}},
{"pk": "forecast.Seasonal_maxBeta", "model": "common.parameter", "fields": {"description": "Maximum value for the trend parameter", "value": "default"}},
{"pk": "forecast.Seasonal_maxPeriod", "model": "common.parameter", "fields": {"description": "Maximum seasonal cycle to be checked.", "value": "default"}},
{"pk": "forecast.Seasonal_minAlfa", "model": "common.parameter", "fields": {"description": "Minimum value for the constant parameter", "value": "default"}},
{"pk": "forecast.Seasonal_minBeta", "model": "common.parameter", "fields": {"description": "Initial value for the trend parameter", "value": "default"}},
{"pk": "forecast.Seasonal_gamma", "model": "common.parameter", "fields": {"description": "Value of the seasonal parameter", "value": "default"}},
{"pk": "forecast.Seasonal_minPeriod", "model": "common.parameter", "fields": {"description": "Minimum seasonal cycle to be checked.", "value": "default"}},
{"pk": "forecast.Seasonal_minAutocorrelation", "model": "common.parameter", "fields": {"description": "Minimum autocorrelation below which the seasonal forecast method is never selected.", "value": "default"}},
{"pk": "forecast.Seasonal_maxAutocorrelation", "model": "common.parameter", "fields": {"description": "Maximum autocorrelation above which the seasonal forecast method is always selected.", "value": "default"}},
{"pk": "forecast.Skip", "model": "common.parameter", "fields": {"description": "Specifies the number of time series values used to initialize the forecasting method. The forecast error in these bucket isn't counted.", "value": "default"}},
{"pk": "forecast.SingleExponential_initialAlfa", "model": "common.parameter", "fields": {"description": "Initial smoothing constant.", "value": "default"}},
{"pk": "forecast.SingleExponential_maxAlfa", "model": "common.parameter", "fields": {"description": "Maximum smoothing constant.", "value": "default"}},
{"pk": "forecast.SingleExponential_minAlfa", "model": "common.parameter", "fields": {"description": "Minimum smoothing constant.", "value": "default"}},
{"pk": "forecast.loglevel", "model": "common.parameter", "fields": {"description": "Verbosity of the forecast solver", "value": "0"}},
{"pk": "forecast.SmapeAlfa", "model": "common.parameter", "fields": {"description": "Specifies how the sMAPE forecast error is weighted for different time buckets.", "value": "default"}},
{"pk": "forecast.Outlier_maxDeviation", "model": "common.parameter", "fields": {"description": "Multiple of the standard deviation used to detect outliers", "value": "default"}},
{"pk": "forecast.calendar", "model": "common.parameter", "fields": {"description": "Name of a calendar model to define the granularity of the time buckets for forecasting.", "value": "week"}},
{"pk": "forecast.DeadAfterInactivity", "model": "common.parameter", "fields": {"description": "Number of days of inactivity before a forecast is marked dead and it's baseline forecast will be 0. Default is 365.", "value": "default"}}
]
