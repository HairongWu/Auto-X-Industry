<?xml version="1.0" encoding="UTF-8" ?>
<plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <description>Test model for cluster and level computation</description>
  <current>2009-01-01T00:00:00</current>
  <operations>
    <operation name="Dangling operation : 0 : 0"
      xsi:type="operation_fixed_time">
      <duration>PT10S</duration>
    </operation>
    <operation name="Make 1 : 1 : 1" xsi:type="operation_alternate">
      <suboperations>
        <suboperation>
          <operation name="Make 1a : 1 : 1" xsi:type="operation_fixed_time">
            <duration>PT10S</duration>
          </operation>
          <priority>1</priority>
        </suboperation>
        <suboperation>
          <operation name="Make 1b : 1 : 1" xsi:type="operation_fixed_time">
            <duration>PT10S</duration>
          </operation>
          <priority>2</priority>
        </suboperation>
      </suboperations>
    </operation>
  </operations>
    <demands>
    <demand name="order for item 1">
      <quantity>10</quantity>
      <due>2009-01-10T00:00:00</due>
      <priority>1</priority>
      <item name="item 1" />
      <operation name="Delivery 1 : 0 : 1" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </operation>
    </demand>
    <demand name="order for item 2">
      <quantity>10</quantity>
      <due>2009-01-10T00:00:00</due>
      <priority>1</priority>
      <item name="item 2" />
      <operation name="Delivery 2 : 0 : 1" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </operation>
    </demand>
    <demand name="order for item 3">
      <quantity>10</quantity>
      <due>2009-01-10T00:00:00</due>
      <priority>1</priority>
      <item name="item 3" />
      <operation name="Delivery 3 : 0 : 1" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </operation>
    </demand>
    <demand name="order for item 4">
      <quantity>10</quantity>
      <due>2009-01-10T00:00:00</due>
      <priority>1</priority>
      <item name="item 4" />
      <operation name="Delivery 4 : 0 : 1" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </operation>
    </demand>
    <demand name="order for item 5">
      <quantity>10</quantity>
      <due>2009-01-10T00:00:00</due>
      <priority>1</priority>
      <item name="item 5" />
      <operation name="Delivery 5 : 0 : 2" xsi:type="operation_routing">
        <suboperations>
          <suboperation>
            <operation name="Delivery 5 step1 : 0 : 2" xsi:type="operation_fixed_time">
              <duration>PT10S</duration>
            </operation>
          </suboperation>
          <suboperation>
            <operation name="Delivery 5 step2 : 0 : 2" xsi:type="operation_fixed_time">
              <duration>PT10S</duration>
            </operation>
          </suboperation>
        </suboperations>
      </operation>
    </demand>
    <demand name="order for item 6">
      <quantity>10</quantity>
      <due>2009-01-10T00:00:00</due>
      <priority>1</priority>
      <item name="item 6" />
      <operation name="Delivery 6 : 0 : 3" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </operation>
    </demand>
  </demands>
  <buffers>
    <buffer name="buffer item 1 : 1 : 1">
      <item name="item 1" />
      <producing name="Make 1 : 1 : 1" />
    </buffer>
    <buffer name="buffer item 2 : 1 : 1">
      <item name="item 2" />
      <producing name="Make 2 : 1 : 1" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </producing>
    </buffer>
    <buffer name="buffer item 3 : 1 : 1">
      <item name="item 3" />
      <producing name="Make 3 : 1 : 1" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </producing>
    </buffer>
    <buffer name="buffer item 5 : 1 : 2">
      <item name="item 5" />
      <producing name="Make 5 : 1 : 2" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </producing>
    </buffer>
    <buffer name="buffer item 5 : 2 : 2">
      <item name="item 5" />
      <producing name="Make 5 : 2 : 2" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </producing>
    </buffer>
    <buffer name="buffer item 5 : 3 : 2">
      <item name="item 5" />
      <producing name="Make 5 : 3 : 2" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </producing>
    </buffer>
    <buffer name="buffer item 6 : 1 : 3">
      <item name="item 6" />
    </buffer>
    <buffer name="Dangling buffer : -1 : 0" />
    <buffer name="buffer item 3&amp;4 : 2 : 1">
      <item name="item 1" />
    </buffer>
    <buffer name="buffer item 1 : 2 : 1">
      <item name="item 1" />
      <producing name="Make 1 : 2 : 1" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </producing>
    </buffer>
    <buffer name="buffer item 1 : 3 : 1">
      <item name="item 1" />
      <producing name="Make 1 : 3 : 1" xsi:type="operation_fixed_time">
        <duration>PT10S</duration>
      </producing>
    </buffer>
    <buffer name="buffer item 1&amp;3 : 4 : 1">
      <item name="item 1" />
    </buffer>
  </buffers>
  <flows>
    <flow xsi:type="flow_start">
      <operation name="Delivery 1 : 0 : 1" />
      <buffer name="buffer item 1 : 1 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Delivery 2 : 0 : 1" />
      <buffer name="buffer item 2 : 1 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Delivery 3 : 0 : 1" />
      <buffer name="buffer item 3 : 1 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Delivery 4 : 0 : 1" />
      <buffer name="buffer item 3&amp;4 : 2 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Delivery 5 : 0 : 2" />
      <buffer name="buffer item 5 : 1 : 2" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Delivery 6 : 0 : 3" />
      <buffer name="buffer item 6 : 1 : 3" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_end">
      <operation name="Make 5 : 1 : 2" />
      <buffer name="buffer item 5 : 1 : 2" />
      <quantity>1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Make 5 : 1 : 2" />
      <buffer name="buffer item 5 : 2 : 2" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_end">
      <operation name="Make 5 : 2 : 2" />
      <buffer name="buffer item 5 : 2 : 2" />
      <quantity>1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Make 5 : 2 : 2" />
      <buffer name="buffer item 5 : 3 : 2" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_end">
      <operation name="Make 5 : 3 : 2" />
      <buffer name="buffer item 5 : 3 : 2" />
      <quantity>1</quantity>
    </flow>
    <!--   LOOP IN THE SUPPLY CHAIN
      <flow xsi:type="flow_start">
      <operation name="Make 5 : 3 : 2"/>
      <buffer name="buffer item 5 : 1 : 2"/>
      <quantity>-1</quantity>
      </flow>
    -->
    <flow xsi:type="flow_end">
      <operation name="Make 3 : 1 : 1" />
      <buffer name="buffer item 3 : 1 : 1" />
      <quantity>1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Make 3 : 1 : 1" />
      <buffer name="buffer item 3&amp;4 : 2 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_end">
      <operation name="Make 2 : 1 : 1" />
      <buffer name="buffer item 2 : 1 : 1" />
      <quantity>1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Make 3 : 1 : 1" />
      <buffer name="buffer item 1&amp;3 : 4 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Make 1 : 3 : 1" />
      <buffer name="buffer item 1&amp;3 : 4 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_end">
      <operation name="Make 1 : 3 : 1" />
      <buffer name="buffer item 1 : 3 : 1" />
      <quantity>1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Make 1 : 2 : 1" />
      <buffer name="buffer item 1 : 3 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_end">
      <operation name="Make 1 : 2 : 1" />
      <buffer name="buffer item 1 : 2 : 1" />
      <quantity>1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Make 1a : 1 : 1" />
      <buffer name="buffer item 1 : 3 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_start">
      <operation name="Make 1b : 1 : 1" />
      <buffer name="buffer item 1 : 2 : 1" />
      <quantity>-1</quantity>
    </flow>
    <flow xsi:type="flow_end">
      <operation name="Make 1a : 1 : 1" />
      <buffer name="buffer item 1 : 1 : 1" />
      <quantity>1</quantity>
    </flow>
    <flow xsi:type="flow_end">
      <operation name="Make 1b : 1 : 1" />
      <buffer name="buffer item 1 : 1 : 1" />
      <quantity>1</quantity>
    </flow>    
  </flows>
  <resources>
    <resource name="RES2&amp;3 : 1 : 1">
      <loads>
        <load>
          <operation name="Make 2 : 1 : 1" />
        </load>
        <load>
          <operation name="Make 3 : 1 : 1" />
        </load>
      </loads>
    </resource>
    <resource name="Dangling resource : -1 : 0" />
  </resources>

<?python
actual_to_expected = {}
expected_to_actual = {}
output = open("output.1.xml","wt")

def verifyOne(i):
  global actual_to_expected, expected_to_actual, output
  ok = True

  # The entity name also encodes the expected level and cluster
  try: name, expectedlevel, expectedcluster = i.name.split(":")
  except: return
  name = i.__class__.__name__ + " " + name.strip()
  expectedlevel = int(expectedlevel.strip())
  expectedcluster = int(expectedcluster.strip())

  # Check the level
  if expectedlevel != i.level:
    print("%s: incorrect level. Expected %d, got %d" % (name, expectedlevel, i.level), file=output)
    ok = False

  # Check the cluster.
  # We can't garantuee that a cluster number is always the same.
  # We can only check to see that all entities that everything
  # which is supposed to belong to a single cluster is doing so...
  if i.cluster in actual_to_expected:
    if expectedcluster != actual_to_expected[i.cluster]:
      # Exists and is different!
      print("%s: incorrect cluster. Expected %s, got %d" % (name, expected_to_actual.get(expectedcluster), i.cluster), file=output)
      ok = False
  else:
    if expectedcluster in expected_to_actual:
      # This entity has a new cluster number, but another cluster number
      # from the actual output maps to the same input cluster.
      actual_to_expected[i.cluster] = expected_to_actual[expectedcluster]
    else:
      # New entry
      actual_to_expected[i.cluster] = expectedcluster
      expected_to_actual[expectedcluster] = i.cluster

  # Result
  print("%s: %s" % (name, ok and "OK" or "NOK"), file=output)

# Commands
frepple.solver_mrp(constraints=0).solve()
for i in frepple.operations():
  verifyOne(i)
for i in frepple.resources():
  verifyOne(i)
for i in frepple.buffers():
  verifyOne(i)
output.flush()

?>
</plan>
