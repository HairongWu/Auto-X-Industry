<?xml version="1.0" encoding="UTF-8" ?>
<plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <name>Test model for effective operations</name>
  <description>
  In this test the resource capacity varies heavily over time.
  The test case verifies the resource solver is capable of using every
  single bit of capacity available on the resource.
  The capacity search is done for two situations: once with a search
  backward in time, and another one forward in time.

  This test also verifies the logic used by calendars to select the bucket
  that is in effect on a certain day.
  </description>
  <current>2009-01-01T00:00:00</current>

  <calendars>
    <calendar name="Capacity">
      <default>1</default>
      <buckets>
        <!-- From the infinite past till 2009-01-02 no entry is in effect.
             The default value is used -->
        <bucket start="2009-01-02T00:00:00" end="2009-01-06T00:00:00" value="2"/>
        <!-- This entry overrules the previous one: same priority, but later start date -->
        <bucket start="2009-01-03T00:00:00" end="2009-01-07T00:00:00" value="3"/>
        <!-- The next 2 entries overrule the previous one because of the priority.
             The second one has the lowest priority number. -->
        <bucket start="2009-01-04T00:00:00" end="2009-02-01T00:00:00" value="4" priority="-1"/>
        <bucket start="2009-01-04T00:00:00" end="2009-02-01T00:00:00" value="5" priority="-2"/>
        <!-- Between 2009-02-01 and 2009-03-03 no entry is in effect.
             The default value is used. -->
        <!-- From 2009-03-03 till the infinite future this entry rules. -->
        <bucket start="2009-03-03T00:00:00" value="6"/>
      </buckets>
    </calendar>
  </calendars>

  <!-- Model 1 -->
  <operations>
    <operation name="1. make end item" xsi:type="operation_time_per">
      <size_multiple>1</size_multiple>
      <item name="1. end item" />
      <location name="factory" />
      <flows>
        <flow xsi:type="flow_end">
          <item name="1. end item" />
          <quantity>1</quantity>
        </flow>
      </flows>
      <duration_per>P1D</duration_per>
    </operation>
  </operations>
  <resources>
    <resource name="1. Resource">
      <maximum_calendar name="Capacity"/>
      <location name="factory" />
      <loads>
        <load>
          <operation name="1. make end item" />
        </load>
      </loads>
    </resource>
  </resources>

  <!-- Model 2 -->
  <operations>
    <operation name="2. make end item" xsi:type="operation_time_per">
      <size_multiple>1</size_multiple>
      <item name="2. end item" />
      <location name="factory" />
      <flows>
        <flow xsi:type="flow_end">
          <item name="2. end item" />
          <quantity>1</quantity>
        </flow>
      </flows>
      <duration_per>P1D</duration_per>
    </operation>
  </operations>
  <resources>
    <resource name="2. Resource">
      <maximum_calendar name="Capacity"/>
      <location name="factory" />
      <loads>
        <load>
          <operation name="2. make end item" />
        </load>
      </loads>
    </resource>
  </resources>

  <demands>
    <!-- Demand model 1: search for capacity backwards in time -->
    <demand name="1. order">
      <quantity>201</quantity>
      <minshipment>1</minshipment>
      <due>2009-03-06T00:00:00</due>
      <priority>1</priority>
      <item name="1. end item" />
      <location name="factory" />
    </demand>
    <!-- Demand model 2: search for capacity forward in time -->
    <demand name="2. order">
      <quantity>201</quantity>
      <minshipment>1</minshipment>
      <due>2009-01-10T00:00:00</due>
      <priority>1</priority>
      <item name="2. end item" />
      <location name="factory" />
    </demand>
  </demands>

<?python
print("CREATING CONSTRAINED PLAN")
frepple.solver_mrp(plantype=1, constraints=15, loglevel=2).solve()
frepple.saveplan("output.1.xml")
print("CREATING UNCONSTRAINED PLAN")
frepple.solver_mrp(plantype=2, constraints=15, loglevel=2).solve()
frepple.saveplan("output.2.xml")
frepple.solver_mrp(plantype=2, constraints=0, loglevel=2).solve()
frepple.saveplan("output.3.xml")
?>

</plan>
