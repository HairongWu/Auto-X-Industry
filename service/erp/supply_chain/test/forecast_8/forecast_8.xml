<?xml version="1.0" encoding="UTF-8" ?>
<plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<?python
# Define some computed measures
frepple.measure_computed(
    name="forecastconsumedvalue",
    compute_expression="if(cost == 0, forecastconsumedvalue, forecastconsumed * cost)",
    update_expression="if(cost != 0, forecastconsumed := newvalue / cost, forecastconsumedvalue := newvalue)",
)
forecastbaselinevalue = frepple.measure_computed(
    name="forecastbaselinevalue",
    compute_expression="if(cost == 0, forecastbaselinevalue, forecastbaseline * cost)",
    update_expression="if(cost != 0, forecastbaseline := newvalue / cost, forecastbaselinevalue := newvalue)",
)
frepple.measure_computed(
    name="forecastnetvalue",
    compute_expression="if(cost == 0, forecastnetvalue, forecastnet * cost)",
    update_expression="if(cost != 0, forecastnet := newvalue / cost, forecastnetvalue := newvalue)",
)
frepple.measure_computed(
    name="forecastoverridevalue",
    compute_expression="if(cost == 0, forecastoverridevalue, if(forecastoverride == -1, -1, forecastoverride * cost))",
    update_expression="if(cost != 0, forecastoverride := if(newvalue == -1, -1, newvalue / cost), forecastoverridevalue := newvalue)",
    overrides=forecastbaselinevalue, default=-1.0,
)
frepple.measure_computed(
    name="forecastplannedvalue",
    compute_expression="if(cost == 0, forecastplannedvalue, forecastplanned * cost)",
    update_expression="if(cost != 0, forecastplanned := newvalue / cost, forecastplannedvalue := newvalue)",
)
frepple.measure_computed(
    name="forecasttotalvalue",
    compute_expression="if(cost == 0, forecasttotalvalue, forecasttotal * cost)",
    update_expression="if(cost != 0, forecasttotal := newvalue / cost, forecasttotalvalue := newvalue)",
)
frepple.measure_computed(
    name="ordersadjustmentvalue",
    compute_expression="if(cost == 0, ordersadjustmentvalue, ordersadjustment * cost)",
    update_expression="if(cost != 0, ordersadjustment := newvalue / cost, ordersadjustmentvalue := newvalue)",
)
frepple.measure_computed(
    name="ordersopenvalue",
    compute_expression="if(cost == 0, ordersopenvalue, ordersopen * cost)",
    update_expression="if(cost != 0, ordersopen  := newvalue / cost, ordersopenvalue := newvalue)",
)
frepple.measure_computed(
    name="ordersplannedvalue",
    compute_expression="if(cost == 0, ordersplannedvalue, ordersplanned * cost)",
    update_expression="if(cost != 0, ordersplanned := newvalue / cost, ordersplannedvalue := newvalue)",
)
frepple.measure_computed(
    name="orderstotalvalue",
    compute_expression="if(cost == 0, orderstotalvalue, orderstotal * cost)",
    update_expression="if(cost != 0, orderstotal := newvalue / cost, orderstotalvalue := newvalue)",
)
frepple.compileMeasures()
?>

  <current>2019-01-01T00:00:00</current>
  <calendars>
    <calendar name="Months">
      <buckets>
        <bucket start="2019-01-01T00:00:00" end="2019-02-01T00:00:00" value="1"/>
        <bucket start="2019-02-01T00:00:00" end="2019-03-01T00:00:00" value="1"/>
        <bucket start="2019-03-01T00:00:00" end="2019-04-01T00:00:00" value="1"/>
        <bucket start="2019-04-01T00:00:00" end="2019-05-01T00:00:00" value="1"/>
        <bucket start="2019-05-01T00:00:00" end="2019-06-01T00:00:00" value="1"/>
        <bucket start="2019-06-01T00:00:00" end="2019-07-01T00:00:00" value="1"/>
        <bucket start="2019-07-01T00:00:00" end="2019-08-01T00:00:00" value="1"/>
        <bucket start="2019-08-01T00:00:00" end="2019-09-01T00:00:00" value="1"/>
        <bucket start="2019-09-01T00:00:00" end="2019-10-01T00:00:00" value="1"/>
        <bucket start="2019-10-01T00:00:00" end="2019-11-01T00:00:00" value="1"/>
        <bucket start="2019-11-01T00:00:00" end="2019-12-01T00:00:00" value="1"/>
        <bucket start="2019-12-01T00:00:00" end="2020-01-01T00:00:00" value="1"/>
      </buckets>
    </calendar>
  </calendars>

  <customers>
  <!-- level 1-->
    <customer name="customer-A">
    </customer>
    <!-- level 2 -->
    <customer name="customer-AA">
      <owner name="customer-A" />
    </customer>
    <customer name="customer-AB">
      <owner name="customer-A" />
    </customer>
    <customer name="customer-AC">
      <owner name="customer-A" />
    </customer>
    <!-- level 3 -->
    <customer name="customer-AAA">
      <owner name="customer-AA" />
    </customer>
    <customer name="customer-AAB">
      <owner name="customer-AA" />
    </customer>
    <customer name="customer-AAC">
      <owner name="customer-AA" />
    </customer>
    <customer name="customer-ABA">
      <owner name="customer-AB" />
    </customer>
    <customer name="customer-ABB">
      <owner name="customer-AB" />
    </customer>
    <customer name="customer-ABC">
      <owner name="customer-AB" />
    </customer>
    <customer name="customer-ACA">
      <owner name="customer-AC" />
    </customer>
    <customer name="customer-ACB">
      <owner name="customer-AC" />
    </customer>
    <customer name="customer-ACC">
      <owner name="customer-AC" />
    </customer>
  </customers>

  <items>
    <item name="item-A">
    </item>
    <!-- level 2 -->
    <item name="item-AA">
      <owner name="item-A" />
    </item>
    <item name="item-AB">
      <owner name="item-A" />
    </item>
    <item name="item-AC">
      <owner name="item-A" />
    </item>
    <!-- level 3 -->
    <item name="item-AAA">
      <owner name="item-AA" />
    </item>
    <item name="item-AAB">
      <owner name="item-AA" />
      <cost>5</cost>
    </item>
    <item name="item-AAC">
      <owner name="item-AA" />
    </item>
    <item name="item-ABA">
      <owner name="item-AB" />
    </item>
    <item name="item-ABB">
      <owner name="item-AB" />
    </item>
    <item name="item-ABC">
      <owner name="item-AB" />
      <cost>10</cost>
    </item>
    <item name="item-ACA">
      <owner name="item-AC" />
    </item>
    <item name="item-ACB">
      <owner name="item-AC" />
    </item>
    <item name="item-ACC">
      <owner name="item-AC" />
    </item>
  </items>

  <locations>
    <location name="location-A">
    </location>
    <!-- level 2 -->
    <location name="location-AA">
      <owner name="location-A" />
    </location>
    <location name="location-AB">
      <owner name="location-A" />
    </location>
    <location name="location-AC">
      <owner name="location-A" />
    </location>
    <!-- level 3 -->
    <location name="location-AAA">
      <owner name="location-AA" />
    </location>
    <location name="location-AAB">
      <owner name="location-AA" />
    </location>
    <location name="location-AAC">
      <owner name="location-AA" />
    </location>
    <location name="location-ABA">
      <owner name="location-AB" />
    </location>
    <location name="location-ABB">
      <owner name="location-AB" />
    </location>
    <location name="location-ABC">
      <owner name="location-AB" />
    </location>
    <location name="location-ACA">
      <owner name="location-AC" />
    </location>
    <location name="location-ACB">
      <owner name="location-AC" />
    </location>
    <location name="location-ACC">
      <owner name="location-AC" />
    </location>
  </locations>

  <demands>
    <demand name="Forecast A-A-A" xsi:type="demand_forecast">
      <item name="item-A" />
      <customer name="customer-A" />
      <location name="location-A" />
      <calendar name="Months" />
    </demand>
    <demand name="Forecast AAB-ABC-ABC" xsi:type="demand_forecast">
      <item name="item-AAB" />
      <customer name="customer-ABC" />
      <location name="location-ABC" />
      <calendar name="Months" />
      <discrete>false</discrete>
    </demand>
    <demand name="Forecast ABC-ABC-ABC" xsi:type="demand_forecast">
      <item name="item-ABC" />
      <customer name="customer-ABC" />
      <location name="location-ABC" />
      <calendar name="Months" />
      <discrete>true</discrete>
    </demand>
    <demand name="Forecast ABC-ACC-ABC" xsi:type="demand_forecast">
      <item name="item-ABC" />
      <customer name="customer-ABC" />
      <location name="location-ACC" />
      <calendar name="Months" />
      <discrete>true</discrete>
    </demand>
    <demand name="Forecast ABC-A-A" xsi:type="demand_forecast">
      <item name="item-ABC" />
      <customer name="customer-A" />
      <location name="location-A" />
      <calendar name="Months" />
    </demand>
    <demand name="Forecast AB-AB-ABC" xsi:type="demand_forecast">
      <item name="item-AB" />
      <customer name="customer-ABC" />
      <location name="location-AB" />
      <calendar name="Months" />
    </demand>
  </demands>

<?python
from datetime import date

frepple.saveforecast("output.1.xml")
fcst_a_a_a = frepple.demand(name="Forecast A-A-A")
fcst_abc_abc_abc = frepple.demand(name="Forecast ABC-ABC-ABC")
fcst_aab_abc_abc = frepple.demand(name="Forecast AAB-ABC-ABC")
fcst_abc_a_a = frepple.demand(name="Forecast ABC-A-A")
fcst_ab_ab_abc = frepple.demand(name="Forecast AB-AB-ABC")

#
# User defined measures are simple aggregated/disaggregated measures
#

print("Update a child forecast")
fcst_abc_abc_abc.set(date(2019, 3, 1), date(2019, 4, 1), agg=100)
frepple.saveforecast("output.2.xml")

fcst_abc_abc_abc.set(date(2019, 4, 1), date(2019, 5, 1), agg=200);
frepple.saveforecast("output.3.xml")

fcst_abc_abc_abc.set(date(2019, 3, 1), date(2019, 5, 1), agg=600);
frepple.saveforecast("output.4.xml")

fcst_abc_abc_abc.set(date(2019, 6, 1), date(2019, 8, 1), agg=600);
frepple.saveforecast("output.5.xml")

fcst_abc_abc_abc.set(date(2019, 1, 1), date(2019, 12, 1), agg=120);
frepple.saveforecast("output.6.xml")

print("Update a second child forecast")
fcst_aab_abc_abc.set(date(2019, 2, 1), date(2019, 4, 1), agg=100)
frepple.saveforecast("output.7.xml")

print("Update the top level forecast")
fcst_a_a_a.set(date(2019, 10, 1), date(2019, 12, 1), disagg=120)
frepple.saveforecast("output.8.xml")

fcst_a_a_a.set(date(2019, 11, 1), date(2019, 12, 1), disagg=90)
frepple.saveforecast("output.9.xml")

# 
# Baseline forecast is a simple aggregated-disaggregated measure.
#

print("Set discrete and nondiscrete baseline forecast of a child")
fcst_abc_abc_abc.set(date(2019, 1, 1), date(2020, 1, 1), forecastbaseline=6)
fcst_aab_abc_abc.set(date(2019, 1, 1), date(2020, 1, 1), forecastbaseline=6)
frepple.saveforecast("output.10.xml")

print("Erase baseline forecast again")
fcst_a_a_a.set(date(2019, 1, 1), date(2020, 1, 1), forecastbaseline=0)
frepple.saveforecast("output.11.xml")

print("Disaggregate a discrete forecast")
fcst_abc_a_a.set(date(2019, 1, 1), date(2020, 1, 1), forecastbaseline=9)
frepple.saveforecast("output.12.xml")

print("Set a uniform baseline forecast")
fcst_abc_abc_abc.set(date(2019, 1, 1), date(2020, 1, 1), forecastbaseline=0)
fcst_abc_abc_abc.set(date(2019, 1, 1), date(2020, 1, 1), forecastbaseline=48)
frepple.saveforecast("output.13.xml")

# 
# Forecast overrides have very specific disaggregation logic
#

print("Create a forecast override at a child level")
fcst_abc_abc_abc.set(date(2019, 2, 1), date(2019, 3, 1), forecastoverride=8)
frepple.saveforecast("output.14.xml")

print("Scale existing forecast overrides")
fcst_abc_abc_abc.set(date(2019, 1, 1), date(2019, 4, 1), forecastoverride=4)
frepple.saveforecast("output.15.xml")

print("Set non-overriden forecasts")
fcst_abc_abc_abc.set(date(2019, 1, 1), date(2019, 6, 1), forecastoverride=8)
frepple.saveforecast("output.16.xml")

print("Changing forecast override by value")
# Because of discreteness, the override value is set to 30 rather than 35
fcst_abc_abc_abc.set(date(2019, 2, 1), date(2019, 5, 1), forecastoverridevalue=35)
frepple.saveforecast("output.17.xml")

print("Change the forecast override at a parent level")
fcst_ab_ab_abc.set(date(2019, 1, 1), date(2019, 6, 1), forecastoverride=20)
frepple.saveforecast("output.18.xml")

print("Remove all forecast overrides")
fcst_a_a_a.set(date(2019, 1, 1), date(2019, 6, 1), forecastoverride=-1)
frepple.saveforecast("output.19.xml")

#
# Outlier is a local measure, i.e. it is not aggregated or disaggregated.
# It is just stored at the intersection where it is entered.
# 

print("Mark some outliers")
fcst_abc_abc_abc.set(date(2019, 1, 1), date(2019, 3, 1), outlier=1)
fcst_abc_a_a.set(date(2019, 5, 1), date(2019, 6, 1), outlier=1)
fcst_a_a_a.set(date(2019, 11, 1), date(2019, 12, 1), outlier=1)
frepple.saveforecast("output.20.xml")

# 
# Validate bucket disaggregation logic
#
print("Forecast bucket detection")
fcst_abc_abc_abc.set(date(2019, 2, 1), date(2019, 2, 1), forecastoverride=100)
fcst_abc_abc_abc.set(date(2019, 4, 2), date(2019, 4, 2), forecastoverride=100)
fcst_abc_abc_abc.set(date(2019, 6, 2), date(2019, 6, 20), forecastoverride=100)
fcst_abc_abc_abc.set(date(2019, 8, 15), date(2019, 10, 15), forecastoverride=100)
fcst_abc_abc_abc.set(date(2019, 10, 15), date(2019, 11, 15), forecastoverride=100)
fcst_abc_abc_abc.set(date(2019, 12, 1), date(2020, 1, 1), forecastoverride=100)
frepple.saveforecast("output.21.xml")
?>
</plan>
