/**
\page org_mitk_views_segmentation The Segmentation View

\imageMacro{segmentation-dox.svg,"Icon of the Segmentation View",2.00}

\tableofcontents

\section org_mitk_views_segmentationoverview Overview

Segmentation is the act of separating an image into foreground and background subsets by manual or automated delineation, while the foreground is defined to be part of the segmentation.
Such a segmented image subset is also called a label as it typically labels a specific region of interest.
A multilabel segmentation may contain multiple labels organized in distinct groups.
You can create multiple labels for different regions of interest contained within a single segmentation image.
Labels in the same group cannot overlap each other but labels from different groups may overlap.

The MITK <b>Segmentation Plugin</b> allows you to create multilabel segmentations of anatomical and pathological structures in medical images.
The plugin consists of three views:
<ul>
  <li> <b>Segmentation View</b>: Manual and (semi-)automatic segmentation
  <li> \subpage org_mitk_views_segmentationutilities : Post-processing of segmentations
  <li> \subpage org_mitk_views_segmentationtasklist : Optimized workflow for batches of segmentation tasks based on a user-defined task list
</ul>
In this user guide, the features of the <b>Segmentation View</b> are described.
For an introduction to the Segmentation Utilities or Segmentation Task List, refer to the respective user guides.

\imageMacro{QmitkSegmentationPlugin_Overview.png,"Segmentation View", 16.00}

\section org_mitk_views_segmentationtechnicalissues Image and segmentation prerequisites

The Segmentation View has a few prerequisites regarding segmentations and their reference image:
<ul>
  <li> Images must be two or three-dimensional and may be either static or dynamic, e.g., are time-resolved resp. have different pixel values for different time steps.
  <li> Images must be single-valued, i.e. CT, MRI or ultrasound. Images from color doppler or photographic (RGB) images are only partially supported (please be aware that some tools might not be compatible with this image type).
  <li> Segmentations must be congruent to their reference images.
</ul>

\section org_mitk_views_segmentationdataselection Image selection and creating new segmentations

To select a reference image for a new segmentation, click on the <i>Image</i> widget in the Data selection section at the very top of the Segmentation View.
Choose an image from the displayed list of Data Manager images.
Once an image is selected, a new segmentation for this reference image can be created by clicking the button right next to the <i>Segmentation</i> widget in the Data selection section.
A new multilabel segmentation with an initial, empty label is automatically generated if not set otherwise in the preferences.
The new segmentation will be added to the Data Manager as a child node of its reference image node.
It is automatically selected and can be edited in the Segmentation View right away.

Instead of creating a new segmentation, an existing segmentation can be selected and edited as well.
The selection list of existing segmentations for a certain reference image consists of matching/congruent segmentations only.

\imageMacro{"QmitkSegmentation_DataSelection.png","Data selection and creating new segmentations",12}

\section org_mitk_views_segmentationgroups Groups

Segmentation images consist of at least a single group called "Group 0" in which the first default label is created.
More groups can be added and removed but there will always be at least a single group.
Labels of the same group cannot overlap each other.
Labels of different groups may overlap each other.

For example, you could segment the whole heart as "Heart" label in "Group 0", add "Group 1" and create multiple labels of the anatomical details of the heart in that group.
Naturally, all these labels lie within the extents of the "Heart" label of "Group 0" but in principle they are completely independent of "Group 0".
Some pixels are now labelled twice, e.g., as "Heart" and "Left ventricle".
Since the labels of "Group 1" cannot overlap each other, it is impossible to accidentally label a pixel as both "Left ventricle" and "Right ventricle".

If you would like to segment even more details you could create "Group 2" to have up to three labels per pixel.
Nevertheless, groups are technically a flat data structure and cannot contain nested groups.
It is all about possibly overlapping labels from distinct groups and spatially exclusive, non-overlapping labels within the same group.

\imageMacro{"QmitkSegmentation_Groups.png","Groups",10}

\section org_mitk_views_segmentationlabelinstances Labels vs. label instances

The Segmentation View supports label instances.
That is, segmenting multiple distributed entities of the same thing like metastases for example.

A label, as we used the term before, is already a single instance of itself but it may consist of multiple label instances.

If a label consists of multiple label instances, they each show their own distinct pixel value in square brackets as a clue for distinction and identification.

It is important to understand that this number is not a separate, consecutive index for each label.
It is just the plain pixel value of the label instance, which is unique across all label instances of the whole segmentation.

\imageMacro{"QmitkSegmentation_LabelInstances.png","Label instances",10}

\section org_mitk_views_segmentationlock_color_visibility Unlocking, changing color of, and hiding label instances

Label instances are locked by default: label instances from the same group cannot accidentally override pixels from other label instances.
Locked label instances behave like cookie cutters for other label instances of the same group.
You can unlock label instances to remove that protection from other label instances of the same group.
Their pixel contents can then be overridden by other label instances of the same group.

Remember that label instances from distinct groups do not interact with each other.
They can always overlap (not override) each other.

You can also change the color of label instances as well as show (default) or hide their pixel contents.
The icons at the right side of the rows of the groups and labels widget reflect their state in all these regards.

Renaming of labels and label instances can be found in their content menu as shown further below.

\imageMacro{"QmitkSegmentation_LockColorVisibility.png","Unlocking\, changing color of\, and hiding label instances",10}

\section org_mitk_views_segmentationlabelhighlighting Label highlighting

Especially if you have segmentations with many label instances or the label names are not telling, it can be nontrivial to identify the label instance in the label inspector of the segmentation view. To mitigate this problem MITK uses label highlighting in the render windows. As long as you hover with the mouse cursor over a group, label or label instance, the respective label instances will be highlighted in the render windows. Highlighted labels will visually pop out by being shown with full opacity (no transparency) while the opacity of all non-highlighted labels of the same segmentation will be reduced to 30% of the current opacity value (they become very transparent).

By default, label instances that are set to be invisible are not shown while highlighted. By pressing the shift key, one can enforce also invisible label instances to be shown while highlighting.

Remark: the highlighting is supported in all views that use the label inspector (e.g. also the segmentation utilities).

\section org_mitk_views_segmentationcontextmenus Context menus

Actions for organization of groups, labels, and label instances (as well as other operations) can be also found in their right-click context menus.

\imageMacro{"QmitkSegmentation_ContextMenus.png","Context menus of groups\, labels\, and label instances",12}

Most actions available in these context menus are self-explanatory or were already described above by other means of access like the tool button bar for adding and removing groups, labels, and label instances.

Labels and label instances can be <b>renamed</b>, while groups have fixed names.
Note that renaming a label instance will make a separate label out of it, since all instances of the same label share a single common name.

<b>Clear content</b> only clears the pixels of a label instance but won't delete the actual label instance.

Groups can be <b>locked</b> and <b>unlocked</b> as a whole from their context menu, while label instances can be directly locked and unlocked outside the context menu as described further below.

\section org_mitk_views_segmentationlabelsuggestions Label name and color suggestions

When renaming label instances or creating new label instances with enforced manual naming in the Segmentation preferences, entering names is supported by auto-completion for common label names.
The list of predefined label names and colors for the auto-completion feature can be either extended or replaced by a custom list of label name and color suggestions.
This custom list must be specified as a JSON file, just containing an array of objects, each with a mandatory "name" string and an optional "color" string.
The JSON file can be set in the Segmentation preferences as well as a few options on how to apply these suggestions.

\section org_mitk_views_segmentationlabelpresets Saving and loading label set presets

Label set presets are useful to share a certain style or scheme between different segmentation sessions or to provide templates for new segmentation sessions.

The properties of all label instances in all groups like their names, colors, and visibilities are saved as a label set preset by clicking on the 'Save label set preset' button.
Label set presets are applied to any segmentation session by clicking on the 'Load label set preset' button.
If a label instance for a certain value already exists, its properties are overridden by the preset.
If a label instance for a certain value does not yet exist, an empty label instance with the label properties of the preset is created.
The actual pixel contents of label instances are unaffected as label set presets only store label properties.

\imageMacro{QmitkSegmentation_Preset.png,"Saving and loading label set presets", 10.00}

If you work on a repetitive segmentation task, manually loading the same label set preset for each and every new segmentation can be tedious.
To streamline your workflow, you can set a default label set preset in the Segmentation preferences (Ctrl+P). When set, this label set preset will be applied to all new segmentations instead of creating the default red "Label 1" label instance.

If you work on a repetitive segmentation task, manually loading the same label set preset for each and every new segmentation can be tedious.
To streamline your workflow, you can set a default label set preset in the Segmentation preferences (Ctrl+P). When set, this label set preset will be applied to all new segmentations instead of creating the default red "Label 1" label instance.

\section org_mitk_views_segmentationpreferences Preferences

The Segmentation Plugin offers a number of preferences which can be set via the MITK Workbench application preferences (Ctrl+P):

\imageMacro{QmitkSegmentationPreferences.png,"Segmentation preferences", 10.00}

<ul>
  <li> <b>Compact view:</b> Hide the tool button texts to save some space on screen (6 instead of 4 buttons per row)
  <li> <b>2D display:</b> Draw segmentations as as outlines or transparent overlays
  <li> <b>Data node selection mode:</b> Hide everything but the selected segmentation and its reference image
  <li> <b>Default label set preset:</b> Start a new segmentation with this preset instead of a default label
  <li> <b>Label creation:</b> Assign default names and colors to new label instances or ask users for name and color
  <li> <b>Label suggestions:</b> Specify custom suggestions for label names and colors
</ul>

\section org_mitk_views_segmentationtooloverview Segmentation tool overview

MITK offers a comprehensive set of slice-based 2D and (semi-)automated 3D segmentation tools.
The manual 2D tools require some user interaction and can only be applied to a single image slice whereas the 3D tools operate on the whole image.
The 3D tools usually only require a small amount of user interaction, i.e. placing seed points or setting / adjusting parameters.
You can switch between the different toolsets by selecting the 2D or 3D tab in the segmentation view.

\imageMacro{QmitkSegmentation_ToolOverview.png,"An overview of the existing 2D and 3D tools in MITK.",5.50}

\section org_mitk_views_segmentation2dsegmentation 2D segmentation tools

With 2D manual contouring you define which voxels are part of the segmentation and which are not. This allows you to create segmentations of any structures of interest in an image.
You can also use manual contouring to correct segmentations that result from sub-optimal automatic methods.
The drawback of manual contouring is that you might need to define contours on many 2D slices. However, this is mitigated by the interpolation feature, which will make suggestions for a segmentation.

To start using one of the editing tools, click its button from the displayed toolbox.
The selected editing tool will be active and its corresponding button will stay pressed until you click the button again.
Selecting a different tool also deactivates the previous one.\n
If you have to delineate a lot of images, shortcuts to switch between tools becomes convenient.
For that, just hit the first letter of each tool to activate it (A for Add, S for Subtract, etc.).

All of the editing tools work by the same principle: using the mouse (left button) to click anywhere in a 2D window (any of the orientations axial, sagittal, or coronal),
moving the mouse while holding the mouse button and releasing the button to finish the editing action.
Multi-step undo and redo is fully supported by all editing tools by using the application-wide undo / redo buttons in the toolbar.

<i>Remark</i>: Clicking and moving the mouse in any of the 2D render windows will move the crosshair that defines what part of the image is displayed.
This behavior is disabled as long as any of the manual segmentation tools are active - otherwise you might have a hard time concentrating on the contour you are drawing.

\subsection org_mitk_views_segmentationaddsubtracttools Add and subtract tools
\imageMacro{QmitkSegmentation_IMGIconAddSubtract.png,"Add and subtract tools",7.70}

Use the left mouse button to draw a closed contour. When releasing the mouse button, the contour will be added (Add tool) to or removed (Subtract tool) from the current segmentation.
Adding and subtracting voxels can be iteratively repeated for the same segmentation. Holding CTRL / CMD while drawing will invert the current tool's behavior (i.e. instead of adding voxels, they will be subtracted).

\subsection org_mitk_views_segmentationlassotool Lasso tool
\imageMacro{QmitkSegmentation_Lasso.png,"Lasso tool",7.70}

The tool is a more advanced version of the add/subtract tool. It offers you the following features:
<ol>
  <li> Generating a polygon segmentation (click left mouse button to set ancor point)
  <li> Freehand contouring (like the add tool; press left mouse button while moving the mouse)
  <li> Move ancor points (select an ancor point, press left mouse button while moving the mouse)
  <li> Add new ancor points (press CTRL while click left mouse to add an ancor to the contour)
  <li> Delete an ancor point (press Del while ancor point is selected)
  <li> Segmentation can be added to the label (Add mode) or subtracted (Subtract mode)
</ol>
To start a segmentation double left click where the first ancor point should be. To end the segmentation double left click where the last ancor point should be.
Please note that:
<ul>
  <li> feature 3-6 are only available, if auto confirm is *not* activated
  <li> feature 3-5 is not available for freehand contour segments
</ul>

\subsection org_mitk_views_segmentationpaintwipetools Paint and wipe tools
\imageMacro{QmitkSegmentation_IMGIconPaintWipe.png,"Paint and wipe tools",7.68}

Use the <i>Size</i> slider to change the radius of the round paintbrush tool. Move the mouse in any 2D window and press the left button to draw or erase pixels.
Holding CTRL / CMD while drawing will invert the current tool's behavior (i.e. instead of painting voxels, they will be wiped).

\subsection org_mitk_views_segmentationregiongrowingtool Region growing tool
\imageMacro{QmitkSegmentation_IMGIconRegionGrowing.png,"Region growing tool",3.81}

Click at one point in a 2D slice widget to add an image region to the segmentation with the region growing tool.
Region Growing selects all pixels around the mouse cursor that have a similar gray value as the pixel below the mouse cursor.
This allows to quickly create segmentations of structures that have a good contrast to surrounding tissue.
The tool operates based on the current level window, so changing the level window to optimize the contrast for the ROI is encouraged.
Moving the mouse up / down is different from left / right:
Moving up the cursor while holding the left mouse button widens the range for the included grey values; moving it down narrows it.
Moving the mouse left and right will shift the range.
The tool will select more or less pixels, corresponding to the changing gray value range.

\if THISISNOTIMPLEMENTEDATTHEMOMENT
A common issue with region growing is the so called "leakage" which happens when the structure of interest is connected to other pixels, of similar gray values, through a narrow "bridge" at the border of the structure.
The Region Growing tool comes with a "leakage detection/removal" feature. If leakage happens, you can left-click into the leakage region and the tool will try to automatically remove this region (see illustration below).

\imageMacro{QmitkSegmentation_Leakage.png,"Leakage correction feature of the region growing tool",11.28}
\endif

\subsection org_mitk_views_segmentationfilltool Fill tool
\imageMacro{QmitkSegmentation_IMGIconFill.png,"Fill tool",3.81}

Left-click inside a region/segmentation to flood fill all connected pixels that have the same label with the active label. This tool will only work on regions of unlocked labels or on regions that are not labeled at all.

\subsection org_mitk_views_segmentationerasetool Erase tool
\imageMacro{QmitkSegmentation_IMGIconErase.png,"Erase tool",3.79}

This tool removes a connected part of pixels that form a segmentation. You may use it to remove single segmented regions by left-click on specific segmentation region.
This tool will only work and regions of unlocked labels or on regions of the active label.

\subsection org_mitk_views_segmentationclosetool Close tool
\imageMacro{QmitkSegmentation_IMGIconClose.png,"Close tool",3.79}

Left-click inside the region/segmentation to fill all "holes" (pixels labelled with another label or no label) inside the region.
Therefore this tool behaves like a local closing operation. This tool will not work, when a non-labeled region is selected and holes of locked labels will not be filled.
\remark This tool always uses the label of the selected region (even if this label is not the active label). Therefore you can use this tool on regions of the active label and of none locked labels (without the need to change the active label). 

\subsection org_mitk_views_segmentationlivewiretool Live wire tool

\imageMacro{QmitkSegmentation_IMGIconLiveWire.png,"Live wire tool",3.01}

The Live Wire Tool acts as a magnetic lasso with a contour snapping to edges of objects.

\imageMacro{QmitkSegmentation_IMGLiveWireUsage.PNG,"Steps for using the Live Wire Tool",16.00}

The tool handling is the same like the Lasso tool (see for more info), except it generates live wire contours instead of straight lines.

\subsection org_mitk_views_segmentationSegmentAnything Segment Anything Tool

\imageMacro{QmitkSegmentation_nnUnetTool.png,"Segment Anything tool",10.00}

\imageMacro{QmitkSegmentation_SAMTool.png,"Segment Anything tool",10.00}

The Segment Anything Tool is a deep learning-based interactive segmentation tool. Originally created by MetaAI, MITK presents this model for medical image segmentation tasks.
The tool requires that you have Python 3 installed and available on your machine. Note: On Debian/Ubuntu systems, you need to install git, python3-pip, python3-venv package using the following command: `apt install git python3-pip python3-venv`. For best experience, your machine should be ideally equipped with a CUDA-enabled GPU. 
For a detailed explanation of what this algorithm is able to, please refer to https://ai.facebook.com/research/publications/segment-anything/ <br>
Any adjustments to the \subpage org_mitk_editors_stdmultiwidget_Levelwindow setting impacts the segmentation. However, any applied color maps are ignored.

\subsubsection org_mitk_views_segmentationSegmentAnythingWorkflow Workflow:
    -# Install Segment Anything: Goto Preferences (Ctrl+P) > Segment Anything and click "Install Segment Anything with MedSAM" to install Segment Anything (version: 1.0). 
    The installation process implicitly creates a python virtual environment using the Python located in "System Python" in an MITK mainitained directory. Make sure you have a working internet connection. This might take a while. It is a one time job, though.
    Once installed, the "Install Segment Anything" button is grayed out.
    \imageMacro{QmitkSegmentation_SAMTool_Preferences.png,"Segment Anything Preferences",10.00}

    -# Note: If Python is not listed by MITK in "System Python", click "Select..." in the dropdown to choose an unlisted installation of Python. Note that, while selecting an arbitrary environment folder, only select the base folder, e.g. "/usr/bin/".
    No need to navigate all the way into "../usr/bin/python3", for example.
    -# Select a specific model type in the "Model Type" dropdown. The default is "vit_b" for low memory footprint. However, more larger models "vit_l" and "vit_h" are also available for selection.
    -# Select inference hardware, i.e. any GPU or CPU. This is internally equivalent to setting the <b>CUDA_VISIBLE_DEVICES</b> environment variable.
    -# Click "OK" to save the preference settings.
    -# Goto Segmentation View > 2D tools > Segment Anything.
    -# Click "Initialize Segment Anything" to start the tool backend. This will invoke downloading of the selected model type from the internet. This might take a while. It is a one time job, though.
    -# Once the tool is initialized, Press SHIFT+Left Click on any of the 3 render windows to start click guided segmentation on that slice.
    -# Press SHIFT+Right Click for negative clicks to adjust the preview mask on the render window.

\subsection org_mitk_views_segmentationMedSAM MedSAM Tool

\imageMacro{QmitkSegmentation_nnUnetTool.png,"MedSAM tool",10.00}

\imageMacro{QmitkSegmentation_MedSAMTool.png,"MedSAM tool",10.00}

The MedSAM (Segment Anything in Medical Images) tool is a specialization of the the Segment Anything (SAM) tool. A new foundation model in the back end is dedicated to universal medical image segmentation.
Just like the Segment Anything tool, the MedSAM tool requires that you have Python 3 installed and available on your machine. Note: On Debian/Ubuntu systems, you need to install the git, python3-pip, and python3-venv packages using the following command: `sudo apt install git python3-pip python3-venv`. 
For best experience, your machine should be ideally equipped with a CUDA-enabled GPU. 
Any adjustments to the \subpage org_mitk_editors_stdmultiwidget_Levelwindow setting impacts the segmentation. However, any applied color maps are ignored.

\subsubsection org_mitk_views_segmentationMedSAMWorkflow Workflow
    -# Install MedSAM: Goto Preferences (Ctrl+P) > Segment Anything and click "Install Segment Anything with MedSAM" to install Segment Anything (version: 1.0) & MedSAM tool backends together. 
    The installation process implicitly creates a python virtual environment using the Python located in "System Python" in a directory maintained by MITK. Make sure you have a working internet connection, which might take a while. It is a one-time job, though.
    Once installed, the "Install Segment Anything with MedSAM" button is grayed out. For details, refer to the Segment Anything tool workflow.

    -# Goto Segmentation View > 2D tools > MedSAM.
    -# Click "Initialize MedSAM" to start the tool. This will start downloading the model weights from the internet first, if not done before. This might take a while. It is a one-time job, though.
    -# Once the tool is initialized, press Shift+Left Click on any of the render windows to create a bounding box for that image slice.
    -# Click on the anchor points of the bounding box to adjust the region of interest.
    -# Click on Preview to generate segmentation from MedSAM model.

Note: For a detailed explanation of what this algorithm is able to, please refer to https://www.nature.com/articles/s41467-024-44824-z

\subsection org_mitk_views_segmentationMonaiLabel2D MONAI Label 2D Tool

\imageMacro{QmitkSegmentation_nnUnetTool.png,"MONAILabel2D tool",10.00}
Read more about the tool here at \subpage org_mitk_views_segmentationMonaiLabel3D

\subsection org_mitk_views_segmentationinterpolation 2D and 3D Interpolation

Creating segmentations using 2D manual contouring for large image volumes may be very time-consuming, because structures of interest may cover a large range of slices.
The segmentation view offers two helpful features to mitigate this drawback:

<ul>
  <li> 2D Interpolation
  <li> 3D Interpolation
</ul>

The <b>2D Interpolation</b> creates suggestions for a segmentation whenever you have a slice that

<ul>
  <li> has got neighboring slices with segmentations (these do not need to be direct neighbors but could also be a couple of slices away) AND
  <li> is completely clear of a manual segmentation, i.e. there will be no suggestion if there is even only a single pixel of segmentation in the current slice.
</ul>

\imageMacro{QmitkSegmentation_2DInterpolation.png,"2D interpolation usage",3.01}

Interpolated suggestions are displayed as outlines, until you confirm them as part of the segmentation.
To confirm single slices, click the <i>Confirm for single slice</i> button below the toolbox. You may also review the interpolations visually and then accept all of them at once by selecting <i>Confirm for all slices</i>.

The <b>3D interpolation</b> creates suggestions for 3D segmentations. That means if you start contouring, from the second contour onwards, the surface of the segmented area will be interpolated based on the given contour information.
The interpolation works with all available manual tools. Please note that this is currently a pure mathematical interpolation, i.e. image intensity information is not taken into account.
With each further contour the interpolation result will be improved, but the more contours you provide the longer the recalculation will take.
To achieve an optimal interpolation result and in this way a most accurate segmentation you should try to describe the surface with sparse contours by segmenting in arbitrary
oriented planes. The 3D interpolation is not meant to be used for parallel slice-wise segmentation, but rather segmentations in i.e. the axial, coronal and sagittal plane.

\imageMacro{QmitkSegmentation_3DInterpolationWrongRight.png,"3D interpolation usage",16.00}

You can accept the interpolation result by clicking the <i>Confirm</i>-button below the tool buttons.
In this case the 3D interpolation will be deactivated automatically so that the result can be post-processed without any interpolation running in the background.

Additional to the surface, black contours are shown in the 3D render window, which mark all the drawn contours used for the interpolation.
You can navigate between the drawn contours by clicking on the corresponding <i>position</i> nodes in the data manager which are stored as sub-nodes of the selected segmentation.
If you do not want to see these nodes just uncheck the <i>Show Position Nodes</i> checkbox and these nodes will be hidden.

If you want to delete a drawn contour we recommend to use the Erase-Tool since undo / redo is not yet working for 3D interpolation.
The current state of the 3D interpolation can be saved across application restart. For that, just click on save project during the interpolation is active.
After restarting the application and load your project you can click on "Reinit Interpolation" within the 3D interpolation GUI area.

\section org_mitk_views_segmentation3dsegmentation 3D segmentation tools

The 3D tools operate on the whole image and require usually a small amount of interaction like placing seed-points or specifying certain parameters. All 3D tools provide
an immediate segmentation feedback, which is displayed as a transparent green overlay. For accepting a preview you have to press the <i>Confirm</i> button of the selected tool.
The following 3D tools are available:

\subsection org_mitk_views_segmentation3dthresholdtool 3D Threshold tool

The thresholding tool simply applies a 3D threshold to the patient image. All pixels with values equal or above the selected threshold are labeled as part of the segmentation.
You can change the threshold by either moving the slider of setting a certain value in the spinbox.

\imageMacro{QmitkSegmentation_3DThresholdTool.png,"3D Threshold tool",10.00}

\subsection org_mitk_views_segmentation3dulthresholdTool 3D upper / lower threshold tool

The Upper/Lower Thresholding tool works similar to the simple 3D threshold tool but allows you to define an upper and lower threshold. All pixels with
values within this threshold interval will be labeled as part of the segmentation.

\imageMacro{QmitkSegmentation_3DULThresholdTool.png,"3D upper / lower threshold tool",10.00}

\subsection org_mitk_views_segmentation3dotsutool 3D Otsu tool

The 3D Otsu tool provides a more sophisticated thresholding algorithm. It allows you to define a number of regions. Based on the image histogram the pixels will
then be divided into different regions. The more regions you define the longer the calculation will take. You can select afterwards which of these regions you want to confirm as segmentation.
\imageMacro{QmitkSegmentation_3DOtsuTool.png,"3D Otsu tool",10.00}

\subsection org_mitk_views_segmentation3dgrowcuttool 3D GrowCut tool

The 3D GrowCut tool uses previously created segmentation labels (e.g. by the "Add"-tool) stored in the segmentation layer 0.
The GrowCut tool will use these segmentation labels to create a seedimage that will serve as input to the algorithm.
As an advanced setting option, a Distance penalty can be set, which increases the cohesion in the immediate surroundings of the initial labels.
Based on the seedimage and the Distance penalty, a growing is started, which includes all areas that are not initially assigned to a specific label.
During this process, initially unassigned areas are assigned to the best fitting labels.
After the segmentation process, the user can decide which newly generated labels should be confirmed.

\imageMacro{QmitkSegmentation_3DGrowCutTool.png,"3D GrowCut tool",16.00}

\subsection org_mitk_views_segmentationpickingtool Picking Tool

The Picking tool offers two modes that allow you to manipulate "islands" within your segmentation. This is especially useful if e.g. a thresholding provided you with several areas within
your image but you are just interested in one special region.
- Picking mode: Allows you to select certain "islands". When the pick is confirmed, the complete content of the active label will be removed except the pick. This mode is beneficial if you have a lot segmentation noise and want to pick the relevant parts and dismiss the rest. Hint: You can also pick from other labels, but this will only work if these labels are unlocked.
- Relabel mode: Allows you to select certain "islands". When the pick is confirmed, it will be relabeled and added to the active label content. Hint: This mode ignores the locks of other labels, hence you do not need to unlock them explicitly.

\imageMacro{QmitkSegmentation_PickingTool.png,"Picking tool",10.00}

\subsection org_mitk_views_segmentationnnUNetTool nnU-Net Tool (Ubuntu only)

\imageMacro{QmitkSegmentation_nnUnetTool.png,"nnUNet tool",10.00}

This tool provides a GUI to the deep learning-based segmentation algorithm called the nnU-Net v1. With this tool, you can get a segmentation mask predicted for the loaded image in MITK. Be ready with the pre-trained weights (a.k.a <b>RESULTS_FOLDER</b>)
for your organ or task concerned, before using the tool. For a detailed explanation of the parameters and pre-trained weights folder structure etc., please refer to https://github.com/MIC-DKFZ/nnUNet. <br>
Remark: The tool assumes that you have a Python3 environment with nnU-Net v1 (pip) installed. Your machine should be also equipped with a CUDA enabled GPU.

\subsubsection org_mitk_views_segmentationnnUNetToolWorkflow Workflow:
    -# Select the "Python Path" drop-down to see if MITK has automatically detected other Python environments.
    Click on a fitting environment for the nnUNet inference or click "Select" in the dropdown to choose an unlisted python environment. Note that, while selecting an arbitrary environment folder, only select the base folder, e.g. "myenv".
    No need to select all the way until "../myenv/bin/python", for example.
    -# Click on the "nnUNet Results Folder" directory icon to navigate to the results folder on your hard disk. This is equivalent to setting the <b>RESULTS_FOLDER</b> environment variable. If your results folder is as
    per the nnUNet required folder structure, the configuration, trainers, tasks and folds are automatically parsed and correspondingly loaded in the drop-down boxes as shown below. Note that MITK automatically checks for the
    <b>RESULTS_FOLDER</b> environment variable value and, if found, auto parses that directory when the tool is started.
    \imageMacro{QmitkSegmentation_nnUNet_Settings.png,"nnUNet Segmentation Settings",10}
    -# Choose your required Task-Configuration-Trainer-Planner-Fold parameters, sequentially. By default, all entries are selected inside the "Fold" dropdown (shown: "All").
    Note that, even if you uncheck all entries from the "Fold" dropdown (shown: "None"), then too,  all folds would be considered for inferencing.
    -# For ensemble predictions, you will get the option to select parameters irrespective on postprocessing files available in the ensembles folder of <b>RESULTS_FOLDER</b>.
    Note that, if a postprocessing json file exists for the selected combination then it will used for ensembling, by default. To choose not to, uncheck the "Use PostProcessing JSON" in the "Advanced" section.
    \imageMacro{QmitkSegmentation_nnUNet_ensemble.png,"nnUNet Segmentation Settings",10}
    -# If your task is trained with multi-modal inputs, then "Multi-Modal" checkbox is checked and the no.of modalities are preloaded and shown next to "Required Modalities".
    Instantly, as much node selectors with corresponding modality names should appear below to select the Data Manager along including a selector with preselected with the reference node.
    Now, select the image nodes in the node selectors accordingly for accurate inferencing.
    \imageMacro{QmitkSegmentation_nnUNet_multimodal.png,"nnUNet Multi Modal Settings",10.00}
    -# Click on "Preview".
    -# In the "Advanced" section, you can also activate other options like "Mixed Precision" and "Enable Mirroring" (for test time data augmentation) pertaining to nnUNet.
    \imageMacro{QmitkSegmentation_nnUNet_Advanced.png,"nnUNet Advanced Settings",10.00}
    -# Use "Advanced" > "GPU Id" combobox to change the preferred GPU for inferencing. This is internally equivalent to setting the <b>CUDA_VISIBLE_DEVICES</b> environment variable.
    -# Every inferred segmentation is cached to prevent a redundant computation. In case, a user doesn't wish to cache a Preview, uncheck the "Enable Caching" in the "Advanced" section. This will ensure that the
    current parameters will neither be checked against the existing cache nor a segmentation be loaded from it when Preview is clicked.
    -# You may always clear all the cached segmentations by clicking "Clear Cache" button.

\subsubsection org_mitk_views_segmentationnnUNetToolMisc Miscellaneous:
    -# In case you want to reload/reparse the folders in the "nnUNet Results Folder", eg. after adding new tasks into it, you may do so without reselecting the folder again by clicking the "Refresh Results Folder" button.
    -# The "Advanced" > "GPU Id" combobox lists the Nvidia GPUs available by parsing the <tt>nvidia-smi</tt> utility output. In case your machine has Nvidia CUDA enabled GPUs but the <tt>nvidia-smi</tt> fails for some reason, the "GPU Id" combobox will show no entries.
    In such a situation, it's still possible to execute inferencing by manually entering the preferred GPU Id, eg. 0 in the combobox.
    -# The "Advanced" > "Available Models" lists the available pre-trained tasks for download. Make sure you have internet connection. Then, choose a Task from the dropdown and click the Download button. The pre-trained models for the selected Task
    will be downloaded and placed to the <b>RESULTS_FOLDER</b> directory automatically.
    -# In the <b>RESULTS_FOLDER</b> directory, inside the trainer-planner folder of every task, MITK keeps a "mitk_export.json" file for fast loading for multi-modal information. It is recommended not to delete this file(s) for a fast responsive UI.
    Tip: If multi-modal information shown on MITK is not correct for a given task, you may modify this JSON file and try again.
  
\subsection org_mitk_views_segmentationTotalSegmentator TotalSegmentator Tool

\imageMacro{QmitkSegmentation_nnUnetTool.png,"TotalSegmentator tool",10.00}

This tool provides a GUI to the deep learning-based segmentation algorithm called the TotalSegmentator (v2). With this tool, you can get a segmentation mask predicted for 117 classes in CT images, loaded in MITK. 
For a detailed explanation on tasks and supported classes etc., please refer to https://github.com/wasserth/TotalSegmentator <br>
The tool assumes that you have Python >= 3.9 installed and available on your machine. We recommend to install TotalSegmentator via MITK. The "Install TotalSegmentator" action implicitly creates a python virtual environment in an MITK mainitained
directory. Note: on Debian/Ubuntu systems, you need to install the python3-venv package using the following command:  `apt install python3-venv`. For best results, your machine should be ideally equipped with a CUDA-enabled GPU. 
\imageMacro{QmitkSegmentation_TotalsegmentatorTool.png, "TotalSegmentator Settings",5}

\subsubsection org_mitk_views_segmentationTotalSegmentatorWorkflow Workflow:
    -# Install TotalSegmentator: Click "Install TotalSegmentator" to install TotalSegmentator (version: 2.0.5) in a virtual environment. Make sure you have a working internet connection. This might take a while. It is a one time job, though.
    Once installed, the "Install TotalSegmentator" button is grayed out.
    -# If Python is not found by MITK goto "Install Options" & select the "System Python Path" drop-down to see if MITK has automatically detected other Python environments.
    Click on a fitting Python installation for TotalSegmentator to use or click "Select" in the dropdown to choose an unlisted installation of Python. Note that, while selecting an arbitrary environment folder, only select the base folder, e.g. "/usr/bin/".
    No need to navigate all the way into "../usr/bin/python3", for example.
    -# Select a specific subtask in the "Tasks" drop-downs. The default is "total" for non-specific total segmentation.
    -# Click on "Run TotalSegmentator" for a preview.
    -# In the "Advanced" section, you can also activate other options like "Fast" for faster runtime and less memory requirements. Use "Fast" if you only have a CPU for inferencing.
    -# Use "Advanced" > "GPU Id" combobox to change the preferred GPU for inferencing. This is internally equivalent to setting the <b>CUDA_VISIBLE_DEVICES</b> environment variable.
    -# In case you want to use your own virtual environment containing TotalSegmentator, goto "Install Options" & check "Use Custom Installation" checkbox. Then, select the environment of your choice by using "Custom Env. Path".

\subsection org_mitk_views_segmentationMonaiLabel3D MONAI Label 3D Tool

\imageMacro{QmitkSegmentation_nnUnetTool.png,"MONAILabel3D tool",10.00}

\imageMacro{QmitkSegmentation_MonaiLabelTool.png,"MONAI Label tool",10.00}

MONAI Label is a server-client system that facilitates interactive medical image annotation by using AI. MONAI Label typically hosts different "Apps", e.g. Radiology or Pathology. Each App hosts a set of pretrained models on pertaining datasets.
MITK is tested for the Radiology app and only supports auto and click-based "deepgrow" models. For internal reasons, MITK doesn't support "deepedit" and "localization_spine" models specifically.
The tool requires that you have a URL to a (self-) hosted MONAI Label server. 
For a detailed explanation of what MONAI Label is capable of, please refer to https://docs.monai.io/projects/label/en/latest/. <br>
Any adjustments to the \subpage org_mitk_editors_stdmultiwidget_Levelwindow setting impacts the segmentation. However, any applied color maps are ignored.

\subsubsection org_mitk_views_segmentationSegmentAnythingWorkflow Workflow:
    -# Enter your URL in the "MONAI Server URL" box and press the refresh button next to it. This connects MITK to the MONAI Label server and fetches exposed metadata.
    -# Select the Radiology app e.g. from the "Available Apps" combobox. This will load all supported model names in the "Models" combo box below it.
    -# From the "Models" box select the model you want to use. Immediately, all supported classes of the model on which the model was trained will be shown below it.
    -# If an interactive model is selected e.g. "deepgrow_3d", Press and hold SHIFT and left click on any of the 3 render windows to start click guided segmentation.
    Press SHIFT+Right click for negative clicks to adjust the preview mask on the render window.
    -# If an auto-segmentation model is selected e.g. "deepedit_seg", simply click "Preview" for generating masks.


\section org_mitk_views_segmentationpostprocessing Additional things you can do with segmentations

Segmentations are never an end in themselves. Consequently, the segmentation view adds a couple of "post-processing" actions, accessible through the context-menu of the data manager.

\imageMacro{QmitkSegmentation_IMGDataManagerContextMenu.png,"Context menu items for segmentations",10.58}

<ul>
<li> <b>Create polygon %model</b> applies the marching cubes algorithm to the segmentation. This polygon %model can be used for visualization in 3D or other applications such as stereolithography (3D printing).
<li> <b>Create smoothed polygon %model</b> uses smoothing in addition to the marching cubes algorithm, which creates models that do not follow the exact outlines of the segmentation, but look smoother.
<li> <b>Autocrop</b> can save memory. Manual segmentations have the same extent as the patient image, even if the segmentation comprises only a small sub-volume. This invisible and meaningless margin is removed by autocropping.
</ul>

\section org_mitk_views_segmentationof3dtimages Segmentation of 3D+t images

For segmentation of 3D+t images, some tools give you the option to choose between creating dynamic and static masks.
<ul>
  <li> Dynamic masks can be created on each time frame individually.
  <li> Static masks will be defined on one time frame and will be the same for all other time frames.
</ul>

In general, segmentation is applied on the time frame that is selected when execution is performed.
If you alter the time frame, the segmentation preview is adapted.

*/
